{"ast":null,"code":"import { useDebugValue } from 'react';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { useObservableState } from './use-observable-state';\nimport { useObservable } from './use-observable';\nexport function useObservablePickState(state$, initialState) {\n  var keys = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    keys[_i - 2] = arguments[_i];\n  }\n\n  var value = useObservableState(useObservable(function () {\n    return state$.pipe(distinctUntilChanged(function (s1, s2) {\n      return keys.every(function (k) {\n        return s1[k] === s2[k];\n      });\n    }), map(function (state) {\n      return keys.reduce( // eslint-disable-next-line no-sequences\n      function (o, k) {\n        return o[k] = state[k], o;\n      }, {});\n    }));\n  }), initialState);\n  useDebugValue(value);\n  return value;\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AAEA,SAASC,GAAT,EAAcC,oBAAd,QAA0C,gBAA1C;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AA0BA,OAAM,SAAUC,sBAAV,CACJC,MADI,EAEJC,YAFI,EAImC;AACvC;;OAAA,yCAAgB;AAAhBC;;;AAEA,MAAMC,KAAK,GAAGN,kBAAkB,CAC9BC,aAAa,CAAC;AACZ,iBAAM,CAACM,IAAP,CACER,oBAAoB,CAAC,UAACS,EAAD,EAAKC,EAAL,EAAO;AAAK,iBAAI,CAACC,KAAL,CAAW,aAAC;AAAI,iBAAE,CAACC,CAAD,CAAF,KAAUF,EAAE,CAACE,CAAD,CAAZ;AAAe,OAA/B;AAAgC,KAA7C,CADtB,EAEEb,GAAG,CAAC,iBAAK;AACP,iBAAI,CAACc,MAAL,EACE;AACA,gBAACC,CAAD,EAAIF,CAAJ,EAAK;AAAK,eAAEE,CAAC,CAACF,CAAD,CAAD,GAAOG,KAAK,CAACH,CAAD,CAAb,EAAmBE,CAApB;AAAsB,OAFlC,EAGE,EAHF;AAIC,KALA,CAFL;AASC,GAVU,CADiB,EAa9BT,YAb8B,CAAhC;AAeAP,eAAa,CAACS,KAAD,CAAb;AACA,SAAOA,KAAP;AACD","names":["useDebugValue","map","distinctUntilChanged","useObservableState","useObservable","useObservablePickState","state$","initialState","keys","value","pipe","s1","s2","every","k","reduce","o","state"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\use-observable-pick-state.ts"],"sourcesContent":["import { useDebugValue } from 'react'\nimport { Observable } from 'rxjs'\nimport { map, distinctUntilChanged } from 'rxjs/operators'\nimport { useObservableState } from './use-observable-state'\nimport { useObservable } from './use-observable'\n\n/**\n * Creates an object composed of the picked state properties. Similar to lodash `pick`.\n * Changes of any of these properties will trigger a rerendering.\n * Errors are thrown on unreachable path.\n *\n * @param state$ Output state.\n * @param keys keys of state\n */\nexport function useObservablePickState<\n  TState,\n  TKeys extends keyof TState,\n  TInitial extends null | undefined | void\n>(\n  state$: Observable<TState>,\n  initialState: TInitial,\n  ...keys: TKeys[]\n): { [K in TKeys]: TState[K] } | TInitial\nexport function useObservablePickState<TState, TKeys extends keyof TState>(\n  state$: Observable<TState>,\n  initialState:\n    | { [K in TKeys]: TState[K] }\n    | (() => { [K in TKeys]: TState[K] }),\n  ...keys: TKeys[]\n): { [K in TKeys]: TState[K] }\nexport function useObservablePickState<TState, TKeys extends keyof TState>(\n  state$: Observable<TState>,\n  initialState:\n    | { [K in TKeys]: TState[K] }\n    | (() => { [K in TKeys]: TState[K] }),\n  ...keys: TKeys[]\n): { [K in TKeys]: TState[K] } {\n  const value = useObservableState(\n    useObservable(() =>\n      state$.pipe(\n        distinctUntilChanged((s1, s2) => keys.every(k => s1[k] === s2[k])),\n        map(state =>\n          keys.reduce(\n            // eslint-disable-next-line no-sequences\n            (o, k) => ((o[k] = state[k]), o),\n            {} as { [K in TKeys]: TState[K] }\n          )\n        )\n      )\n    ),\n    initialState\n  )\n  useDebugValue(value)\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}