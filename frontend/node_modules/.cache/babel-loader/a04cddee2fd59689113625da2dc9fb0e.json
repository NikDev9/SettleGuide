{"ast":null,"code":"import { isObservable, BehaviorSubject } from 'rxjs';\nimport { useState, useRef, useDebugValue } from 'react';\nimport { useRefFn, getEmptySubject } from '../helpers';\nexport function useObservableStateInternal(useSubscription, state$OrInit, initialState) {\n  // Even though hooks are under conditional block\n  // it is for a completely different use case\n  // which unlikely coexists with the other one.\n  // A warning is also added to the docs.\n  if (isObservable(state$OrInit)) {\n    var state$_1 = state$OrInit;\n\n    var _a = useState(function () {\n      if (state$_1 instanceof BehaviorSubject || state$_1.value !== undefined) {\n        return state$_1.value;\n      }\n\n      if (typeof initialState === 'function') {\n        return initialState();\n      }\n\n      return initialState;\n    }),\n        state = _a[0],\n        setState = _a[1];\n\n    useSubscription(state$_1, setState);\n    useDebugValue(state);\n    return state;\n  } else {\n    var init_1 = state$OrInit;\n\n    var _b = useState(initialState),\n        state_1 = _b[0],\n        setState = _b[1];\n\n    var input$Ref_1 = useRefFn(getEmptySubject);\n    var state$ = useRefFn(function () {\n      return init_1(input$Ref_1.current, state_1);\n    }).current;\n    var callback = useRef(function (state) {\n      return input$Ref_1.current.next(state);\n    }).current;\n    useSubscription(state$, setState);\n    useDebugValue(state_1);\n    return [state_1, callback];\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,YAArB,EAA4CC,eAA5C,QAAmE,MAAnE;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,aAA3B,QAAgD,OAAhD;AAEA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,YAA1C;AAEA,OAAM,SAAUC,0BAAV,CACJC,eADI,EAEJC,YAFI,EAQJC,YARI,EAQkC;AAEtC;AACA;AACA;AACA;AACA,MAAIV,YAAY,CAACS,YAAD,CAAhB,EAAgC;AAC9B,QAAME,QAAM,GAAGF,YAAf;;AACM,aAAoBP,QAAQ,CAAqB;AACrD,UACES,QAAM,YAAYV,eAAlB,IACCU,QAAkC,CAACC,KAAnC,KAA6CC,SAFhD,EAGE;AACA,eAAQF,QAAkC,CAACC,KAA3C;AACD;;AACD,UAAI,OAAOF,YAAP,KAAwB,UAA5B,EAAwC;AACtC,eAAQA,YAA6B,EAArC;AACD;;AACD,aAAOA,YAAP;AACD,KAXiC,CAA5B;AAAA,QAACI,KAAK,QAAN;AAAA,QAAQC,QAAQ,QAAhB;;AAaNP,mBAAe,CAACG,QAAD,EAASI,QAAT,CAAf;AAEAX,iBAAa,CAACU,KAAD,CAAb;AAEA,WAAOA,KAAP;AACD,GApBD,MAoBO;AACL,QAAME,MAAI,GAAGP,YAAb;;AACM,aAAoBP,QAAQ,CAAqBQ,YAArB,CAA5B;AAAA,QAACO,OAAK,QAAN;AAAA,QAAQF,QAAQ,QAAhB;;AAEN,QAAMG,WAAS,GAAGb,QAAQ,CAAkBC,eAAlB,CAA1B;AAEA,QAAMa,MAAM,GAAGd,QAAQ,CAAC;AAAM,mBAAI,CAACa,WAAS,CAACE,OAAX,EAAoBH,OAApB,CAAJ;AAA8B,KAArC,CAAR,CAA+CG,OAA9D;AACA,QAAMC,QAAQ,GAAGlB,MAAM,CAAC,UAACW,KAAD,EAAc;AACpC,wBAAS,CAACM,OAAV,CAAkBE,IAAlB,CAAuBR,KAAvB;AAA6B,KADR,CAAN,CAEfM,OAFF;AAIAZ,mBAAe,CAACW,MAAD,EAASJ,QAAT,CAAf;AAEAX,iBAAa,CAACa,OAAD,CAAb;AAEA,WAAO,CAACA,OAAD,EAAQI,QAAR,CAAP;AACD;AACF","names":["isObservable","BehaviorSubject","useState","useRef","useDebugValue","useRefFn","getEmptySubject","useObservableStateInternal","useSubscription","state$OrInit","initialState","state$_1","value","undefined","state","setState","init_1","state_1","input$Ref_1","state$","current","callback","next"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\internal\\use-observable-state-internal.ts"],"sourcesContent":["import { Observable, isObservable, Subject, BehaviorSubject } from 'rxjs'\nimport { useState, useRef, useDebugValue } from 'react'\nimport type { useSubscription as useSubscriptionType } from '../use-subscription'\nimport { useRefFn, getEmptySubject } from '../helpers'\n\nexport function useObservableStateInternal<TState, TInput = TState>(\n  useSubscription: typeof useSubscriptionType,\n  state$OrInit:\n    | Observable<TState>\n    | ((\n        input$: Observable<TInput>,\n        initialState?: TState\n      ) => Observable<TState>),\n  initialState?: TState | (() => TState)\n): TState | undefined | [TState | undefined, (input: TInput) => void] {\n  // Even though hooks are under conditional block\n  // it is for a completely different use case\n  // which unlikely coexists with the other one.\n  // A warning is also added to the docs.\n  if (isObservable(state$OrInit)) {\n    const state$ = state$OrInit\n    const [state, setState] = useState<TState | undefined>(() => {\n      if (\n        state$ instanceof BehaviorSubject ||\n        (state$ as BehaviorSubject<TState>).value !== undefined\n      ) {\n        return (state$ as BehaviorSubject<TState>).value\n      }\n      if (typeof initialState === 'function') {\n        return (initialState as () => TState)()\n      }\n      return initialState\n    })\n\n    useSubscription(state$, setState)\n\n    useDebugValue(state)\n\n    return state\n  } else {\n    const init = state$OrInit\n    const [state, setState] = useState<TState | undefined>(initialState)\n\n    const input$Ref = useRefFn<Subject<TInput>>(getEmptySubject)\n\n    const state$ = useRefFn(() => init(input$Ref.current, state)).current\n    const callback = useRef((state: TInput) =>\n      input$Ref.current.next(state)\n    ).current\n\n    useSubscription(state$, setState)\n\n    useDebugValue(state)\n\n    return [state, callback]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}