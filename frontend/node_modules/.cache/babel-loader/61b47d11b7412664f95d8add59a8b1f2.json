{"ast":null,"code":"import { useRef } from 'react';\nimport { NEVER } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { useForceUpdate } from './helpers';\nimport { useObservable } from './use-observable';\n/**\n * Enhance an Observable by making errors catch-able to ErrorBoundary.\n *\n * It catches Observable error and re-throw it as React render error.\n *\n * @template TInput Input value within Observable.\n *\n * @param input$ Input Observable.\n * @returns Observable with the same input type\n */\n\nexport function useRenderThrow(input$) {\n  var forceUpdate = useForceUpdate();\n  var errorRef = useRef();\n  var output$ = useObservable(function (inputs$) {\n    return inputs$.pipe(switchMap(function (_a) {\n      var input$ = _a[0];\n      errorRef.current = null;\n      return input$.pipe(catchError(function (error) {\n        errorRef.current = error;\n        forceUpdate();\n        return NEVER;\n      }));\n    }));\n  }, [input$]);\n\n  if (errorRef.current) {\n    // Let error boundary catch the error\n    throw errorRef.current;\n  }\n\n  return output$;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAAqBC,KAArB,QAAkC,MAAlC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,gBAAtC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,cAAV,CACJC,MADI,EACsB;AAE1B,MAAMC,WAAW,GAAGJ,cAAc,EAAlC;AACA,MAAMK,QAAQ,GAAGT,MAAM,EAAvB;AAEA,MAAMU,OAAO,GAAGL,aAAa,CAC3B,mBAAO;AACL,kBAAO,CAACM,IAAR,CACER,SAAS,CAAC,UAACS,EAAD,EAAS;UAAPL,MAAM;AAChBE,cAAQ,CAACI,OAAT,GAAmB,IAAnB;AACA,aAAON,MAAM,CAACI,IAAP,CACLT,UAAU,CAAC,iBAAK;AACdO,gBAAQ,CAACI,OAAT,GAAmBC,KAAnB;AACAN,mBAAW;AACX,eAAOP,KAAP;AACD,OAJS,CADL,CAAP;AAOD,KATQ,CADX;AAWC,GAbwB,EAc3B,CAACM,MAAD,CAd2B,CAA7B;;AAiBA,MAAIE,QAAQ,CAACI,OAAb,EAAsB;AACpB;AACA,UAAMJ,QAAQ,CAACI,OAAf;AACD;;AAED,SAAOH,OAAP;AACD","names":["useRef","NEVER","catchError","switchMap","useForceUpdate","useObservable","useRenderThrow","input$","forceUpdate","errorRef","output$","pipe","_a","current","error"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\use-render-throw.ts"],"sourcesContent":["import { useRef } from 'react'\nimport { Observable, NEVER } from 'rxjs'\nimport { catchError, switchMap } from 'rxjs/operators'\nimport { useForceUpdate } from './helpers'\nimport { useObservable } from './use-observable'\n\n/**\n * Enhance an Observable by making errors catch-able to ErrorBoundary.\n *\n * It catches Observable error and re-throw it as React render error.\n *\n * @template TInput Input value within Observable.\n *\n * @param input$ Input Observable.\n * @returns Observable with the same input type\n */\nexport function useRenderThrow<TInput>(\n  input$: Observable<TInput>\n): Observable<TInput> {\n  const forceUpdate = useForceUpdate()\n  const errorRef = useRef<Error | null>()\n\n  const output$ = useObservable(\n    inputs$ =>\n      inputs$.pipe(\n        switchMap(([input$]) => {\n          errorRef.current = null\n          return input$.pipe(\n            catchError(error => {\n              errorRef.current = error\n              forceUpdate()\n              return NEVER\n            })\n          )\n        })\n      ),\n    [input$]\n  )\n\n  if (errorRef.current) {\n    // Let error boundary catch the error\n    throw errorRef.current\n  }\n\n  return output$\n}\n"]},"metadata":{},"sourceType":"module"}