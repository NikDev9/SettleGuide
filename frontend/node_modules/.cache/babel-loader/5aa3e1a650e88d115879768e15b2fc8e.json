{"ast":null,"code":"import { useDebugValue, useState } from 'react';\nimport { useSubscription } from './use-subscription';\nimport { useForceUpdate } from './helpers';\n/**\n * Consume the Observable resource.\n *\n * Unlike Promise, Observable is a multiple push mechanism.\n * This hook triggers extra re-rendering when Suspense should restart.\n *\n * @param resource Observable resource\n */\n\nexport function useObservableSuspense(resource) {\n  var resourceValue = resource.read();\n  var forceUpdate = useForceUpdate();\n\n  var _a = useState(resourceValue),\n      state = _a[0],\n      setState = _a[1];\n\n  useSubscription(resource.valueRef$$, function (valueRef) {\n    /* Guard code. Value should always be ready when reaching this far. */\n\n    /* istanbul ignore else */\n    if (valueRef) {\n      setState(valueRef.current);\n    }\n  });\n  useSubscription(resource.shouldUpdate$$, forceUpdate);\n  useDebugValue(state);\n  return state;\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,cAAT,QAA+B,WAA/B;AAGA;;;;;;;;;AAQA,OAAM,SAAUC,qBAAV,CACJC,QADI,EACyC;AAE7C,MAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAT,EAAtB;AACA,MAAMC,WAAW,GAAGL,cAAc,EAAlC;;AACM,WAAoBF,QAAQ,CAAUK,aAAV,CAA5B;AAAA,MAACG,KAAK,QAAN;AAAA,MAAQC,QAAQ,QAAhB;;AAENR,iBAAe,CAACG,QAAQ,CAACM,UAAV,EAAsB,oBAAQ;AAC3C;;AACA;AACA,QAAIC,QAAJ,EAAc;AACZF,cAAQ,CAACE,QAAQ,CAACC,OAAV,CAAR;AACD;AACF,GANc,CAAf;AAQAX,iBAAe,CAACG,QAAQ,CAACS,cAAV,EAA0BN,WAA1B,CAAf;AAEAR,eAAa,CAACS,KAAD,CAAb;AACA,SAAOA,KAAP;AACD","names":["useDebugValue","useState","useSubscription","useForceUpdate","useObservableSuspense","resource","resourceValue","read","forceUpdate","state","setState","valueRef$$","valueRef","current","shouldUpdate$$"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\use-observable-suspense.ts"],"sourcesContent":["import { useDebugValue, useState } from 'react'\nimport { useSubscription } from './use-subscription'\nimport { useForceUpdate } from './helpers'\nimport { ObservableResource } from './observable-resource'\n\n/**\n * Consume the Observable resource.\n *\n * Unlike Promise, Observable is a multiple push mechanism.\n * This hook triggers extra re-rendering when Suspense should restart.\n *\n * @param resource Observable resource\n */\nexport function useObservableSuspense<TInput, TOutput extends TInput = TInput>(\n  resource: ObservableResource<TInput, TOutput>\n): TOutput {\n  const resourceValue = resource.read()\n  const forceUpdate = useForceUpdate()\n  const [state, setState] = useState<TOutput>(resourceValue)\n\n  useSubscription(resource.valueRef$$, valueRef => {\n    /* Guard code. Value should always be ready when reaching this far. */\n    /* istanbul ignore else */\n    if (valueRef) {\n      setState(valueRef.current)\n    }\n  })\n\n  useSubscription(resource.shouldUpdate$$, forceUpdate)\n\n  useDebugValue(state)\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}