{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { useRefFn } from '../helpers';\nimport { useRef } from 'react';\n/**\n * @template TOutput Output value within Observable.\n * @template TInputs A readonly tuple of all dependencies.\n *\n * @param useCustomEffect useEffect or useLayoutEffect\n * @param init A pure function that, when applied to an Observable,\n * returns an Observable.\n * @param inputs An dependency array with fixed length. When one of the dependencies\n * changes the Observable in `init` will emit an array of all the dependencies.\n */\n\nexport function useObservableInternal(useCustomEffect, init, inputs) {\n  // Even though hooks are under conditional block\n  // it is for a completely different use case\n  // which unlikely coexists with the other one.\n  // A warning is also added to the docs.\n  if (!inputs) {\n    return useRefFn(init).current;\n  }\n\n  var inputs$Ref = useRefFn(function () {\n    return new BehaviorSubject(inputs);\n  });\n  var source$Ref = useRefFn(function () {\n    return init(inputs$Ref.current);\n  });\n  var firstEffectRef = useRef(true);\n  useCustomEffect(function () {\n    if (firstEffectRef.current) {\n      firstEffectRef.current = false;\n      return;\n    }\n\n    inputs$Ref.current.next(inputs);\n  }, inputs);\n  return source$Ref.current;\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,eAArB,QAA4C,MAA5C;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAAoBC,MAApB,QAAkC,OAAlC;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,qBAAV,CACJC,eADI,EAEJC,IAFI,EAKJC,MALI,EAKiB;AAErB;AACA;AACA;AACA;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAOL,QAAQ,CAACI,IAAD,CAAR,CAA4CE,OAAnD;AACD;;AAED,MAAMC,UAAU,GAAGP,QAAQ,CAAC;AAAM,eAAID,eAAJ,CAAoBM,MAApB;AAA2B,GAAlC,CAA3B;AACA,MAAMG,UAAU,GAAGR,QAAQ,CAAC;AAAM,eAAI,CAACO,UAAU,CAACD,OAAZ,CAAJ;AAAwB,GAA/B,CAA3B;AAEA,MAAMG,cAAc,GAAGR,MAAM,CAAC,IAAD,CAA7B;AACAE,iBAAe,CAAC;AACd,QAAIM,cAAc,CAACH,OAAnB,EAA4B;AAC1BG,oBAAc,CAACH,OAAf,GAAyB,KAAzB;AACA;AACD;;AACDC,cAAU,CAACD,OAAX,CAAmBI,IAAnB,CAAwBL,MAAxB;AACD,GANc,EAMZA,MANY,CAAf;AAQA,SAAOG,UAAU,CAACF,OAAlB;AACD","names":["BehaviorSubject","useRefFn","useRef","useObservableInternal","useCustomEffect","init","inputs","current","inputs$Ref","source$Ref","firstEffectRef","next"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\internal\\use-observable-internal.ts"],"sourcesContent":["import { Observable, BehaviorSubject } from 'rxjs'\nimport { useRefFn } from '../helpers'\nimport { useEffect, useRef } from 'react'\n\n/**\n * @template TOutput Output value within Observable.\n * @template TInputs A readonly tuple of all dependencies.\n *\n * @param useCustomEffect useEffect or useLayoutEffect\n * @param init A pure function that, when applied to an Observable,\n * returns an Observable.\n * @param inputs An dependency array with fixed length. When one of the dependencies\n * changes the Observable in `init` will emit an array of all the dependencies.\n */\nexport function useObservableInternal<TOutput, TInputs extends Readonly<any[]>>(\n  useCustomEffect: typeof useEffect,\n  init:\n    | (() => Observable<TOutput>)\n    | ((inputs$: Observable<[...TInputs]>) => Observable<TOutput>),\n  inputs?: [...TInputs]\n): Observable<TOutput> {\n  // Even though hooks are under conditional block\n  // it is for a completely different use case\n  // which unlikely coexists with the other one.\n  // A warning is also added to the docs.\n  if (!inputs) {\n    return useRefFn(init as () => Observable<TOutput>).current\n  }\n\n  const inputs$Ref = useRefFn(() => new BehaviorSubject(inputs))\n  const source$Ref = useRefFn(() => init(inputs$Ref.current))\n\n  const firstEffectRef = useRef(true)\n  useCustomEffect(() => {\n    if (firstEffectRef.current) {\n      firstEffectRef.current = false\n      return\n    }\n    inputs$Ref.current.next(inputs)\n  }, inputs)\n\n  return source$Ref.current\n}\n"]},"metadata":{},"sourceType":"module"}