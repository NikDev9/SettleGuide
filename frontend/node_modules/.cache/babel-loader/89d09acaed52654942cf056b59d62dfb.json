{"ast":null,"code":"/**\n * Useful utilities\n */\nimport { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport { Subject } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n/**\n * Returns the first argument it receives.\n */\n\nexport function identity(value) {\n  return value;\n}\n/**\n * Maps an Observable of Arraylike to an Observable\n * of the first item.\n *\n * Example:\n *\n * ```typescript\n * const text$ = useObservable(pluckFirst, [props.text])\n * ```\n *\n * @param inputs$ An Observable of arraylike.\n *\n */\n\nexport function pluckFirst(inputs$) {\n  return pluck(0)(inputs$);\n}\n/**\n * Maps an Observable of DOM events to an Observable\n * of the currentTarget value.\n *\n * Example:\n *\n * ```typescript\n * const [onChange, textChange$] = useObservableCallback<\n *  string,\n *  React.FormEvent<HTMLInputElement>\n * >(pluckCurrentTargetValue)\n * ```\n *\n */\n\nexport function pluckCurrentTargetValue(event$) {\n  return pluck('currentTarget', 'value')(event$);\n}\n/**\n * Maps an Observable of DOM events to an Observable\n * of the currentTarget checked.\n *\n * Example:\n *\n * ```typescript\n * const [onChange, checked$] = useObservableCallback<\n *  boolean,\n *  React.FormEvent<HTMLInputElement>\n * >(pluckCurrentTargetChecked)\n * ```\n *\n */\n\nexport function pluckCurrentTargetChecked(event$) {\n  return pluck('currentTarget', 'checked')(event$);\n}\n/**\n * Return an empty Subject\n * @ignore\n */\n\nexport function getEmptySubject() {\n  return new Subject();\n}\n/**\n * One-time ref init.\n * @param init A function that returns a value. Will be called only once.\n * @returns A ref object with the returned value.\n */\n\nexport function useRefFn(init) {\n  var firstRef = useRef(true);\n  var ref = useRef(null);\n\n  if (firstRef.current) {\n    firstRef.current = false;\n    ref.current = init();\n  }\n\n  return ref;\n}\n/**\n * Force re-renders Component.\n */\n\nexport function useForceUpdate() {\n  var updateState = useState(0)[1];\n  return useRef(function () {\n    return updateState(increment);\n  }).current;\n}\n\nfunction increment(n) {\n  return (n + 1) % 1000000;\n}\n/**\n * Prevent React warning when using useLayoutEffect on server.\n */\n\n\nexport var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect :\n/* istanbul ignore next: both are not called on server */\nuseEffect;","map":{"version":3,"mappings":"AAAA;;;AAGA,SACEA,MADF,EAGEC,QAHF,EAIEC,eAJF,EAKEC,SALF,QAMO,OANP;AAOA,SAASC,OAAT,QAAoC,MAApC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA;;;;AAGA,OAAM,SAAUC,QAAV,CAAsBC,KAAtB,EAA8B;AAClC,SAAOA,KAAP;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUC,UAAV,CACJC,OADI,EACqB;AAEzB,SAAOJ,KAAK,CAAU,CAAV,CAAL,CAAkBI,OAAlB,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,uBAAV,CAEJC,MAFI,EAEsB;AAC1B,SAAON,KAAK,CACV,eADU,EAEV,OAFU,CAAL,CAGLM,MAHK,CAAP;AAID;AAED;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,yBAAV,CAEJD,MAFI,EAEsB;AAC1B,SAAON,KAAK,CACV,eADU,EAEV,SAFU,CAAL,CAGLM,MAHK,CAAP;AAID;AAED;;;;;AAIA,OAAM,SAAUE,eAAV,GAAyB;AAC7B,SAAO,IAAIT,OAAJ,EAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUU,QAAV,CAAsBC,IAAtB,EAAmC;AACvC,MAAMC,QAAQ,GAAGhB,MAAM,CAAC,IAAD,CAAvB;AACA,MAAMiB,GAAG,GAAGjB,MAAM,CAAW,IAAX,CAAlB;;AACA,MAAIgB,QAAQ,CAACE,OAAb,EAAsB;AACpBF,YAAQ,CAACE,OAAT,GAAmB,KAAnB;AACAD,OAAG,CAACC,OAAJ,GAAcH,IAAI,EAAlB;AACD;;AACD,SAAOE,GAAP;AACD;AAED;;;;AAGA,OAAM,SAAUE,cAAV,GAAwB;AAC5B,MAAMC,WAAW,GAAGnB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAApB;AACA,SAAOD,MAAM,CAAC;AAAM,sBAAW,CAACqB,SAAD,CAAX;AAAsB,GAA7B,CAAN,CAAqCH,OAA5C;AACD;;AAED,SAASG,SAAT,CAAmBC,CAAnB,EAA4B;AAC1B,SAAO,CAACA,CAAC,GAAG,CAAL,IAAU,OAAjB;AACD;AAED;;;;;AAGA,OAAO,IAAMC,yBAAyB,GACpC,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAD3B,IAEA,OAAOD,MAAM,CAACC,QAAP,CAAgBC,aAAvB,KAAyC,WAFzC,GAGIxB,eAHJ;AAII;AACAC,SANC","names":["useRef","useState","useLayoutEffect","useEffect","Subject","pluck","identity","value","pluckFirst","inputs$","pluckCurrentTargetValue","event$","pluckCurrentTargetChecked","getEmptySubject","useRefFn","init","firstRef","ref","current","useForceUpdate","updateState","increment","n","useIsomorphicLayoutEffect","window","document","createElement"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\helpers.ts"],"sourcesContent":["/**\n * Useful utilities\n */\nimport {\n  useRef,\n  MutableRefObject,\n  useState,\n  useLayoutEffect,\n  useEffect\n} from 'react'\nimport { Subject, Observable } from 'rxjs'\nimport { pluck } from 'rxjs/operators'\n\n/**\n * Returns the first argument it receives.\n */\nexport function identity<T>(value: T): T {\n  return value\n}\n\n/**\n * Maps an Observable of Arraylike to an Observable\n * of the first item.\n *\n * Example:\n *\n * ```typescript\n * const text$ = useObservable(pluckFirst, [props.text])\n * ```\n *\n * @param inputs$ An Observable of arraylike.\n *\n */\nexport function pluckFirst<TArr extends ArrayLike<any>>(\n  inputs$: Observable<TArr>\n): Observable<TArr[0]> {\n  return pluck<TArr, 0>(0)(inputs$)\n}\n\n/**\n * Maps an Observable of DOM events to an Observable\n * of the currentTarget value.\n *\n * Example:\n *\n * ```typescript\n * const [onChange, textChange$] = useObservableCallback<\n *  string,\n *  React.FormEvent<HTMLInputElement>\n * >(pluckCurrentTargetValue)\n * ```\n *\n */\nexport function pluckCurrentTargetValue<\n  TEvent extends { currentTarget: { value: any } }\n>(event$: Observable<TEvent>): Observable<TEvent['currentTarget']['value']> {\n  return pluck<TEvent, 'currentTarget', 'value'>(\n    'currentTarget',\n    'value'\n  )(event$)\n}\n\n/**\n * Maps an Observable of DOM events to an Observable\n * of the currentTarget checked.\n *\n * Example:\n *\n * ```typescript\n * const [onChange, checked$] = useObservableCallback<\n *  boolean,\n *  React.FormEvent<HTMLInputElement>\n * >(pluckCurrentTargetChecked)\n * ```\n *\n */\nexport function pluckCurrentTargetChecked<\n  TEvent extends { currentTarget: { checked: any } }\n>(event$: Observable<TEvent>): Observable<TEvent['currentTarget']['checked']> {\n  return pluck<TEvent, 'currentTarget', 'checked'>(\n    'currentTarget',\n    'checked'\n  )(event$)\n}\n\n/**\n * Return an empty Subject\n * @ignore\n */\nexport function getEmptySubject<T>() {\n  return new Subject<T>()\n}\n\n/**\n * One-time ref init.\n * @param init A function that returns a value. Will be called only once.\n * @returns A ref object with the returned value.\n */\nexport function useRefFn<T>(init: () => T) {\n  const firstRef = useRef(true)\n  const ref = useRef<T | null>(null)\n  if (firstRef.current) {\n    firstRef.current = false\n    ref.current = init()\n  }\n  return ref as MutableRefObject<T>\n}\n\n/**\n * Force re-renders Component.\n */\nexport function useForceUpdate(): () => void {\n  const updateState = useState(0)[1]\n  return useRef(() => updateState(increment)).current\n}\n\nfunction increment(n: number): number {\n  return (n + 1) % 1000000\n}\n\n/**\n * Prevent React warning when using useLayoutEffect on server.\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? useLayoutEffect\n    : /* istanbul ignore next: both are not called on server */\n      useEffect\n"]},"metadata":{},"sourceType":"module"}