{"ast":null,"code":"import { useObservableInternal } from './internal/use-observable-internal';\nimport { useEffect } from 'react';\nexport function useObservable(init, inputs) {\n  return useObservableInternal(useEffect, init, inputs);\n}","map":{"version":3,"mappings":"AACA,SAASA,qBAAT,QAAsC,oCAAtC;AACA,SAASC,SAAT,QAA0B,OAA1B;AA0CA,OAAM,SAAUC,aAAV,CACJC,IADI,EAIJC,MAJI,EAIiB;AAErB,SAAOJ,qBAAqB,CAACC,SAAD,EAAYE,IAAZ,EAAkBC,MAAlB,CAA5B;AACD","names":["useObservableInternal","useEffect","useObservable","init","inputs"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\use-observable.ts"],"sourcesContent":["import { Observable } from 'rxjs'\nimport { useObservableInternal } from './internal/use-observable-internal'\nimport { useEffect } from 'react'\n\n/**\n * Accepts a function that returns an Observable.\n * Optionally accepts an array of dependencies which\n * will be turned into Observable and be passed to the\n * `init` function.\n *\n * React functional components are called many times during their lifecycle.\n * Create or transform Observables in `init` function so that the operations\n * won't be repeatedly performed.\n *\n * ⚠ **Note:** `useObservable` will call `init` once and always return\n * the same Observable. It is not safe to access closure (except other Observables)\n * directly inside `init`.\n * You should use ref or pass them as dependencies through the second argument.\n *\n * ⚠ **Note:** Due to rules of hooks you can either offer or omit the\n * dependencies array but do not change to one another during Component's life cycle.\n * The length of the dependencies array must also be fixed.\n *\n * @template TOutput Output value in Observable\n *\n * @param init A pure function that, when applied to an Observable,\n * returns an Observable.\n */\nexport function useObservable<TOutput>(\n  init: () => Observable<TOutput>\n): Observable<TOutput>\n/**\n * @template TOutput Output value within Observable.\n * @template TInputs A readonly tuple of all dependencies.\n *\n * @param init A pure function that, when applied to an Observable,\n * returns an Observable.\n * @param inputs An dependency array with fixed length. When one of the dependencies\n * changes the Observable in `init` will emit an array of all the dependencies.\n */\nexport function useObservable<TOutput, TInputs extends Readonly<any[]>>(\n  init: (inputs$: Observable<[...TInputs]>) => Observable<TOutput>,\n  inputs: [...TInputs]\n): Observable<TOutput>\nexport function useObservable<TOutput, TInputs extends Readonly<any[]>>(\n  init:\n    | (() => Observable<TOutput>)\n    | ((inputs$: Observable<[...TInputs]>) => Observable<TOutput>),\n  inputs?: [...TInputs]\n): Observable<TOutput> {\n  return useObservableInternal(useEffect, init, inputs)\n}\n"]},"metadata":{},"sourceType":"module"}