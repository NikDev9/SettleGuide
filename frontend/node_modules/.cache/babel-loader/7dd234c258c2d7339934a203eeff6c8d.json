{"ast":null,"code":"import { useIsomorphicLayoutEffect } from './helpers';\nimport { useSubscriptionInternal } from './internal/use-subscription-internal';\nexport function useLayoutSubscription(input$, observerOrNext$, error, complete) {\n  return useSubscriptionInternal(useIsomorphicLayoutEffect, [input$, observerOrNext$, error, complete]);\n}","map":{"version":3,"mappings":"AAEA,SAASA,yBAAT,QAA0C,WAA1C;AACA,SAASC,uBAAT,QAAwC,sCAAxC;AAmCA,OAAM,SAAUC,qBAAV,CACJC,MADI,EAEJC,eAFI,EAOJC,KAPI,EAQJC,QARI,EAQsC;AAE1C,SAAOL,uBAAuB,CAACD,yBAAD,EAA4B,CACxDG,MADwD,EAExDC,eAFwD,EAGxDC,KAHwD,EAIxDC,QAJwD,CAA5B,CAA9B;AAMD","names":["useIsomorphicLayoutEffect","useSubscriptionInternal","useLayoutSubscription","input$","observerOrNext$","error","complete"],"sources":["F:\\SettleGuide\\frontend\\node_modules\\observable-hooks\\src\\use-layout-subscription.ts"],"sourcesContent":["import { MutableRefObject } from 'react'\nimport { Observable, PartialObserver, Subscription } from 'rxjs'\nimport { useIsomorphicLayoutEffect } from './helpers'\nimport { useSubscriptionInternal } from './internal/use-subscription-internal'\n\n/**\n * Same as [[useSubscription]] except the subscription is established\n * under `useLayoutEffect`.\n *\n * Useful when values are needed before DOM paint.\n *\n * Use it scarcely as it runs synchronously before browser paint.\n * Too many synchronous emissions from the observable could\n * stretch the commit phase.\n *\n * @template TInput Input value within Observable.\n *\n * @param input$ Input Observable.\n * @param observer Observer\n */\nexport function useLayoutSubscription<TInput>(\n  input$: Observable<TInput>,\n  observer?: PartialObserver<TInput>\n): MutableRefObject<Subscription | undefined>\n/**\n * @template TInput Input value within Observable.\n *\n * @param input$ Input Observable.\n * @param next Notify when a new value is emitted.\n * @param error Notify when a new error is thrown.\n * @param complete Notify when the Observable is complete.\n */\nexport function useLayoutSubscription<TInput>(\n  input$: Observable<TInput>,\n  next?: ((value: TInput) => void) | null | undefined,\n  error?: ((error: any) => void) | null | undefined,\n  complete?: (() => void) | null | undefined\n): MutableRefObject<Subscription | undefined>\nexport function useLayoutSubscription<TInput>(\n  input$: Observable<TInput>,\n  observerOrNext$?:\n    | PartialObserver<TInput>\n    | ((value: TInput) => void)\n    | null\n    | undefined,\n  error?: ((error: any) => void) | null | undefined,\n  complete?: (() => void) | null | undefined\n): MutableRefObject<Subscription | undefined> {\n  return useSubscriptionInternal(useIsomorphicLayoutEffect, [\n    input$,\n    observerOrNext$,\n    error,\n    complete\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}